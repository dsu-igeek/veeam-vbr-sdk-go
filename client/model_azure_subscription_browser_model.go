/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br>Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * API version: 1.1-rev0
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureSubscriptionBrowserModel struct for AzureSubscriptionBrowserModel
type AzureSubscriptionBrowserModel struct {
	SubscriptionId string `json:"subscriptionId"`
	OriginalSubscriptionId *string `json:"originalSubscriptionId,omitempty"`
	Locations *[]AzureLocationBrowserModel `json:"locations,omitempty"`
}

// NewAzureSubscriptionBrowserModel instantiates a new AzureSubscriptionBrowserModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureSubscriptionBrowserModel(subscriptionId string, ) *AzureSubscriptionBrowserModel {
	this := AzureSubscriptionBrowserModel{}
	this.SubscriptionId = subscriptionId
	return &this
}

// NewAzureSubscriptionBrowserModelWithDefaults instantiates a new AzureSubscriptionBrowserModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureSubscriptionBrowserModelWithDefaults() *AzureSubscriptionBrowserModel {
	this := AzureSubscriptionBrowserModel{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *AzureSubscriptionBrowserModel) GetSubscriptionId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionBrowserModel) GetSubscriptionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *AzureSubscriptionBrowserModel) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetOriginalSubscriptionId returns the OriginalSubscriptionId field value if set, zero value otherwise.
func (o *AzureSubscriptionBrowserModel) GetOriginalSubscriptionId() string {
	if o == nil || o.OriginalSubscriptionId == nil {
		var ret string
		return ret
	}
	return *o.OriginalSubscriptionId
}

// GetOriginalSubscriptionIdOk returns a tuple with the OriginalSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionBrowserModel) GetOriginalSubscriptionIdOk() (*string, bool) {
	if o == nil || o.OriginalSubscriptionId == nil {
		return nil, false
	}
	return o.OriginalSubscriptionId, true
}

// HasOriginalSubscriptionId returns a boolean if a field has been set.
func (o *AzureSubscriptionBrowserModel) HasOriginalSubscriptionId() bool {
	if o != nil && o.OriginalSubscriptionId != nil {
		return true
	}

	return false
}

// SetOriginalSubscriptionId gets a reference to the given string and assigns it to the OriginalSubscriptionId field.
func (o *AzureSubscriptionBrowserModel) SetOriginalSubscriptionId(v string) {
	o.OriginalSubscriptionId = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *AzureSubscriptionBrowserModel) GetLocations() []AzureLocationBrowserModel {
	if o == nil || o.Locations == nil {
		var ret []AzureLocationBrowserModel
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionBrowserModel) GetLocationsOk() (*[]AzureLocationBrowserModel, bool) {
	if o == nil || o.Locations == nil {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *AzureSubscriptionBrowserModel) HasLocations() bool {
	if o != nil && o.Locations != nil {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []AzureLocationBrowserModel and assigns it to the Locations field.
func (o *AzureSubscriptionBrowserModel) SetLocations(v []AzureLocationBrowserModel) {
	o.Locations = &v
}

func (o AzureSubscriptionBrowserModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if o.OriginalSubscriptionId != nil {
		toSerialize["originalSubscriptionId"] = o.OriginalSubscriptionId
	}
	if o.Locations != nil {
		toSerialize["locations"] = o.Locations
	}
	return json.Marshal(toSerialize)
}

type NullableAzureSubscriptionBrowserModel struct {
	value *AzureSubscriptionBrowserModel
	isSet bool
}

func (v NullableAzureSubscriptionBrowserModel) Get() *AzureSubscriptionBrowserModel {
	return v.value
}

func (v *NullableAzureSubscriptionBrowserModel) Set(val *AzureSubscriptionBrowserModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureSubscriptionBrowserModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureSubscriptionBrowserModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureSubscriptionBrowserModel(val *AzureSubscriptionBrowserModel) *NullableAzureSubscriptionBrowserModel {
	return &NullableAzureSubscriptionBrowserModel{value: val, isSet: true}
}

func (v NullableAzureSubscriptionBrowserModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureSubscriptionBrowserModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


