/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br>Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * API version: 1.1-rev0
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// S3CompatibleBrowserSpec struct for S3CompatibleBrowserSpec
type S3CompatibleBrowserSpec struct {
	CloudBrowserSpec
	RegionId *string `json:"regionId,omitempty"`
	ServicePoint *string `json:"servicePoint,omitempty"`
	GatewayServerId *string `json:"gatewayServerId,omitempty"`
}

// NewS3CompatibleBrowserSpec instantiates a new S3CompatibleBrowserSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3CompatibleBrowserSpec() *S3CompatibleBrowserSpec {
	this := S3CompatibleBrowserSpec{}
	return &this
}

// NewS3CompatibleBrowserSpecWithDefaults instantiates a new S3CompatibleBrowserSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3CompatibleBrowserSpecWithDefaults() *S3CompatibleBrowserSpec {
	this := S3CompatibleBrowserSpec{}
	return &this
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *S3CompatibleBrowserSpec) GetRegionId() string {
	if o == nil || o.RegionId == nil {
		var ret string
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleBrowserSpec) GetRegionIdOk() (*string, bool) {
	if o == nil || o.RegionId == nil {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *S3CompatibleBrowserSpec) HasRegionId() bool {
	if o != nil && o.RegionId != nil {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given string and assigns it to the RegionId field.
func (o *S3CompatibleBrowserSpec) SetRegionId(v string) {
	o.RegionId = &v
}

// GetServicePoint returns the ServicePoint field value if set, zero value otherwise.
func (o *S3CompatibleBrowserSpec) GetServicePoint() string {
	if o == nil || o.ServicePoint == nil {
		var ret string
		return ret
	}
	return *o.ServicePoint
}

// GetServicePointOk returns a tuple with the ServicePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleBrowserSpec) GetServicePointOk() (*string, bool) {
	if o == nil || o.ServicePoint == nil {
		return nil, false
	}
	return o.ServicePoint, true
}

// HasServicePoint returns a boolean if a field has been set.
func (o *S3CompatibleBrowserSpec) HasServicePoint() bool {
	if o != nil && o.ServicePoint != nil {
		return true
	}

	return false
}

// SetServicePoint gets a reference to the given string and assigns it to the ServicePoint field.
func (o *S3CompatibleBrowserSpec) SetServicePoint(v string) {
	o.ServicePoint = &v
}

// GetGatewayServerId returns the GatewayServerId field value if set, zero value otherwise.
func (o *S3CompatibleBrowserSpec) GetGatewayServerId() string {
	if o == nil || o.GatewayServerId == nil {
		var ret string
		return ret
	}
	return *o.GatewayServerId
}

// GetGatewayServerIdOk returns a tuple with the GatewayServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleBrowserSpec) GetGatewayServerIdOk() (*string, bool) {
	if o == nil || o.GatewayServerId == nil {
		return nil, false
	}
	return o.GatewayServerId, true
}

// HasGatewayServerId returns a boolean if a field has been set.
func (o *S3CompatibleBrowserSpec) HasGatewayServerId() bool {
	if o != nil && o.GatewayServerId != nil {
		return true
	}

	return false
}

// SetGatewayServerId gets a reference to the given string and assigns it to the GatewayServerId field.
func (o *S3CompatibleBrowserSpec) SetGatewayServerId(v string) {
	o.GatewayServerId = &v
}

func (o S3CompatibleBrowserSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBrowserSpec, errCloudBrowserSpec := json.Marshal(o.CloudBrowserSpec)
	if errCloudBrowserSpec != nil {
		return []byte{}, errCloudBrowserSpec
	}
	errCloudBrowserSpec = json.Unmarshal([]byte(serializedCloudBrowserSpec), &toSerialize)
	if errCloudBrowserSpec != nil {
		return []byte{}, errCloudBrowserSpec
	}
	if o.RegionId != nil {
		toSerialize["regionId"] = o.RegionId
	}
	if o.ServicePoint != nil {
		toSerialize["servicePoint"] = o.ServicePoint
	}
	if o.GatewayServerId != nil {
		toSerialize["gatewayServerId"] = o.GatewayServerId
	}
	return json.Marshal(toSerialize)
}

type NullableS3CompatibleBrowserSpec struct {
	value *S3CompatibleBrowserSpec
	isSet bool
}

func (v NullableS3CompatibleBrowserSpec) Get() *S3CompatibleBrowserSpec {
	return v.value
}

func (v *NullableS3CompatibleBrowserSpec) Set(val *S3CompatibleBrowserSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableS3CompatibleBrowserSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableS3CompatibleBrowserSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3CompatibleBrowserSpec(val *S3CompatibleBrowserSpec) *NullableS3CompatibleBrowserSpec {
	return &NullableS3CompatibleBrowserSpec{value: val, isSet: true}
}

func (v NullableS3CompatibleBrowserSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3CompatibleBrowserSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


