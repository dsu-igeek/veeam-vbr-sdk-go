/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 

API version: 1.0-rev2
Contact: support@veeam.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// RepositorySpec - struct for RepositorySpec
type RepositorySpec struct {
	LinuxLocalStorageSpec *LinuxLocalStorageSpec
	NfsStorageSpec *NfsStorageSpec
	SmbStorageSpec *SmbStorageSpec
	WindowsLocalStorageSpec *WindowsLocalStorageSpec
}

// LinuxLocalStorageSpecAsRepositorySpec is a convenience function that returns LinuxLocalStorageSpec wrapped in RepositorySpec
func LinuxLocalStorageSpecAsRepositorySpec(v *LinuxLocalStorageSpec) RepositorySpec {
	return RepositorySpec{
		LinuxLocalStorageSpec: v,
	}
}

// NfsStorageSpecAsRepositorySpec is a convenience function that returns NfsStorageSpec wrapped in RepositorySpec
func NfsStorageSpecAsRepositorySpec(v *NfsStorageSpec) RepositorySpec {
	return RepositorySpec{
		NfsStorageSpec: v,
	}
}

// SmbStorageSpecAsRepositorySpec is a convenience function that returns SmbStorageSpec wrapped in RepositorySpec
func SmbStorageSpecAsRepositorySpec(v *SmbStorageSpec) RepositorySpec {
	return RepositorySpec{
		SmbStorageSpec: v,
	}
}

// WindowsLocalStorageSpecAsRepositorySpec is a convenience function that returns WindowsLocalStorageSpec wrapped in RepositorySpec
func WindowsLocalStorageSpecAsRepositorySpec(v *WindowsLocalStorageSpec) RepositorySpec {
	return RepositorySpec{
		WindowsLocalStorageSpec: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RepositorySpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LinuxLocalStorageSpec
	err = newStrictDecoder(data).Decode(&dst.LinuxLocalStorageSpec)
	if err == nil {
		jsonLinuxLocalStorageSpec, _ := json.Marshal(dst.LinuxLocalStorageSpec)
		if string(jsonLinuxLocalStorageSpec) == "{}" { // empty struct
			dst.LinuxLocalStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.LinuxLocalStorageSpec = nil
	}

	// try to unmarshal data into NfsStorageSpec
	err = newStrictDecoder(data).Decode(&dst.NfsStorageSpec)
	if err == nil {
		jsonNfsStorageSpec, _ := json.Marshal(dst.NfsStorageSpec)
		if string(jsonNfsStorageSpec) == "{}" { // empty struct
			dst.NfsStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.NfsStorageSpec = nil
	}

	// try to unmarshal data into SmbStorageSpec
	err = newStrictDecoder(data).Decode(&dst.SmbStorageSpec)
	if err == nil {
		jsonSmbStorageSpec, _ := json.Marshal(dst.SmbStorageSpec)
		if string(jsonSmbStorageSpec) == "{}" { // empty struct
			dst.SmbStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.SmbStorageSpec = nil
	}

	// try to unmarshal data into WindowsLocalStorageSpec
	err = newStrictDecoder(data).Decode(&dst.WindowsLocalStorageSpec)
	if err == nil {
		jsonWindowsLocalStorageSpec, _ := json.Marshal(dst.WindowsLocalStorageSpec)
		if string(jsonWindowsLocalStorageSpec) == "{}" { // empty struct
			dst.WindowsLocalStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.WindowsLocalStorageSpec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LinuxLocalStorageSpec = nil
		dst.NfsStorageSpec = nil
		dst.SmbStorageSpec = nil
		dst.WindowsLocalStorageSpec = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(RepositorySpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(RepositorySpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RepositorySpec) MarshalJSON() ([]byte, error) {
	if src.LinuxLocalStorageSpec != nil {
		return json.Marshal(&src.LinuxLocalStorageSpec)
	}

	if src.NfsStorageSpec != nil {
		return json.Marshal(&src.NfsStorageSpec)
	}

	if src.SmbStorageSpec != nil {
		return json.Marshal(&src.SmbStorageSpec)
	}

	if src.WindowsLocalStorageSpec != nil {
		return json.Marshal(&src.WindowsLocalStorageSpec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RepositorySpec) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LinuxLocalStorageSpec != nil {
		return obj.LinuxLocalStorageSpec
	}

	if obj.NfsStorageSpec != nil {
		return obj.NfsStorageSpec
	}

	if obj.SmbStorageSpec != nil {
		return obj.SmbStorageSpec
	}

	if obj.WindowsLocalStorageSpec != nil {
		return obj.WindowsLocalStorageSpec
	}

	// all schemas are nil
	return nil
}

type NullableRepositorySpec struct {
	value *RepositorySpec
	isSet bool
}

func (v NullableRepositorySpec) Get() *RepositorySpec {
	return v.value
}

func (v *NullableRepositorySpec) Set(val *RepositorySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositorySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositorySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositorySpec(val *RepositorySpec) *NullableRepositorySpec {
	return &NullableRepositorySpec{value: val, isSet: true}
}

func (v NullableRepositorySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositorySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


