/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br>Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * API version: 1.1-rev0
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// S3CompatibleBrowserDestinationSpecAllOf struct for S3CompatibleBrowserDestinationSpecAllOf
type S3CompatibleBrowserDestinationSpecAllOf struct {
	HostId *string `json:"hostId,omitempty"`
	ConnectionPoint string `json:"connectionPoint"`
	RegionId string `json:"regionId"`
	BucketName string `json:"bucketName"`
}

// NewS3CompatibleBrowserDestinationSpecAllOf instantiates a new S3CompatibleBrowserDestinationSpecAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3CompatibleBrowserDestinationSpecAllOf(connectionPoint string, regionId string, bucketName string, ) *S3CompatibleBrowserDestinationSpecAllOf {
	this := S3CompatibleBrowserDestinationSpecAllOf{}
	this.ConnectionPoint = connectionPoint
	this.RegionId = regionId
	this.BucketName = bucketName
	return &this
}

// NewS3CompatibleBrowserDestinationSpecAllOfWithDefaults instantiates a new S3CompatibleBrowserDestinationSpecAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3CompatibleBrowserDestinationSpecAllOfWithDefaults() *S3CompatibleBrowserDestinationSpecAllOf {
	this := S3CompatibleBrowserDestinationSpecAllOf{}
	return &this
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetHostId() string {
	if o == nil || o.HostId == nil {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetHostIdOk() (*string, bool) {
	if o == nil || o.HostId == nil {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *S3CompatibleBrowserDestinationSpecAllOf) HasHostId() bool {
	if o != nil && o.HostId != nil {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *S3CompatibleBrowserDestinationSpecAllOf) SetHostId(v string) {
	o.HostId = &v
}

// GetConnectionPoint returns the ConnectionPoint field value
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetConnectionPoint() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ConnectionPoint
}

// GetConnectionPointOk returns a tuple with the ConnectionPoint field value
// and a boolean to check if the value has been set.
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetConnectionPointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConnectionPoint, true
}

// SetConnectionPoint sets field value
func (o *S3CompatibleBrowserDestinationSpecAllOf) SetConnectionPoint(v string) {
	o.ConnectionPoint = v
}

// GetRegionId returns the RegionId field value
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetRegionId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetRegionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *S3CompatibleBrowserDestinationSpecAllOf) SetRegionId(v string) {
	o.RegionId = v
}

// GetBucketName returns the BucketName field value
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetBucketName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *S3CompatibleBrowserDestinationSpecAllOf) GetBucketNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *S3CompatibleBrowserDestinationSpecAllOf) SetBucketName(v string) {
	o.BucketName = v
}

func (o S3CompatibleBrowserDestinationSpecAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostId != nil {
		toSerialize["hostId"] = o.HostId
	}
	if true {
		toSerialize["connectionPoint"] = o.ConnectionPoint
	}
	if true {
		toSerialize["regionId"] = o.RegionId
	}
	if true {
		toSerialize["bucketName"] = o.BucketName
	}
	return json.Marshal(toSerialize)
}

type NullableS3CompatibleBrowserDestinationSpecAllOf struct {
	value *S3CompatibleBrowserDestinationSpecAllOf
	isSet bool
}

func (v NullableS3CompatibleBrowserDestinationSpecAllOf) Get() *S3CompatibleBrowserDestinationSpecAllOf {
	return v.value
}

func (v *NullableS3CompatibleBrowserDestinationSpecAllOf) Set(val *S3CompatibleBrowserDestinationSpecAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableS3CompatibleBrowserDestinationSpecAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableS3CompatibleBrowserDestinationSpecAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3CompatibleBrowserDestinationSpecAllOf(val *S3CompatibleBrowserDestinationSpecAllOf) *NullableS3CompatibleBrowserDestinationSpecAllOf {
	return &NullableS3CompatibleBrowserDestinationSpecAllOf{value: val, isSet: true}
}

func (v NullableS3CompatibleBrowserDestinationSpecAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3CompatibleBrowserDestinationSpecAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


