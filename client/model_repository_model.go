/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 

API version: 1.0-rev2
Contact: support@veeam.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// RepositoryModel - struct for RepositoryModel
type RepositoryModel struct {
	LinuxLocalStorageModel *LinuxLocalStorageModel
	NfsStorageModel *NfsStorageModel
	SmbStorageModel *SmbStorageModel
	WindowsLocalStorageModel *WindowsLocalStorageModel
}

// LinuxLocalStorageModelAsRepositoryModel is a convenience function that returns LinuxLocalStorageModel wrapped in RepositoryModel
func LinuxLocalStorageModelAsRepositoryModel(v *LinuxLocalStorageModel) RepositoryModel {
	return RepositoryModel{
		LinuxLocalStorageModel: v,
	}
}

// NfsStorageModelAsRepositoryModel is a convenience function that returns NfsStorageModel wrapped in RepositoryModel
func NfsStorageModelAsRepositoryModel(v *NfsStorageModel) RepositoryModel {
	return RepositoryModel{
		NfsStorageModel: v,
	}
}

// SmbStorageModelAsRepositoryModel is a convenience function that returns SmbStorageModel wrapped in RepositoryModel
func SmbStorageModelAsRepositoryModel(v *SmbStorageModel) RepositoryModel {
	return RepositoryModel{
		SmbStorageModel: v,
	}
}

// WindowsLocalStorageModelAsRepositoryModel is a convenience function that returns WindowsLocalStorageModel wrapped in RepositoryModel
func WindowsLocalStorageModelAsRepositoryModel(v *WindowsLocalStorageModel) RepositoryModel {
	return RepositoryModel{
		WindowsLocalStorageModel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RepositoryModel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LinuxLocalStorageModel
	err = newStrictDecoder(data).Decode(&dst.LinuxLocalStorageModel)
	if err == nil {
		jsonLinuxLocalStorageModel, _ := json.Marshal(dst.LinuxLocalStorageModel)
		if string(jsonLinuxLocalStorageModel) == "{}" { // empty struct
			dst.LinuxLocalStorageModel = nil
		} else {
			match++
		}
	} else {
		dst.LinuxLocalStorageModel = nil
	}

	// try to unmarshal data into NfsStorageModel
	err = newStrictDecoder(data).Decode(&dst.NfsStorageModel)
	if err == nil {
		jsonNfsStorageModel, _ := json.Marshal(dst.NfsStorageModel)
		if string(jsonNfsStorageModel) == "{}" { // empty struct
			dst.NfsStorageModel = nil
		} else {
			match++
		}
	} else {
		dst.NfsStorageModel = nil
	}

	// try to unmarshal data into SmbStorageModel
	err = newStrictDecoder(data).Decode(&dst.SmbStorageModel)
	if err == nil {
		jsonSmbStorageModel, _ := json.Marshal(dst.SmbStorageModel)
		if string(jsonSmbStorageModel) == "{}" { // empty struct
			dst.SmbStorageModel = nil
		} else {
			match++
		}
	} else {
		dst.SmbStorageModel = nil
	}

	// try to unmarshal data into WindowsLocalStorageModel
	err = newStrictDecoder(data).Decode(&dst.WindowsLocalStorageModel)
	if err == nil {
		jsonWindowsLocalStorageModel, _ := json.Marshal(dst.WindowsLocalStorageModel)
		if string(jsonWindowsLocalStorageModel) == "{}" { // empty struct
			dst.WindowsLocalStorageModel = nil
		} else {
			match++
		}
	} else {
		dst.WindowsLocalStorageModel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LinuxLocalStorageModel = nil
		dst.NfsStorageModel = nil
		dst.SmbStorageModel = nil
		dst.WindowsLocalStorageModel = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(RepositoryModel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(RepositoryModel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RepositoryModel) MarshalJSON() ([]byte, error) {
	if src.LinuxLocalStorageModel != nil {
		return json.Marshal(&src.LinuxLocalStorageModel)
	}

	if src.NfsStorageModel != nil {
		return json.Marshal(&src.NfsStorageModel)
	}

	if src.SmbStorageModel != nil {
		return json.Marshal(&src.SmbStorageModel)
	}

	if src.WindowsLocalStorageModel != nil {
		return json.Marshal(&src.WindowsLocalStorageModel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RepositoryModel) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LinuxLocalStorageModel != nil {
		return obj.LinuxLocalStorageModel
	}

	if obj.NfsStorageModel != nil {
		return obj.NfsStorageModel
	}

	if obj.SmbStorageModel != nil {
		return obj.SmbStorageModel
	}

	if obj.WindowsLocalStorageModel != nil {
		return obj.WindowsLocalStorageModel
	}

	// all schemas are nil
	return nil
}

type NullableRepositoryModel struct {
	value *RepositoryModel
	isSet bool
}

func (v NullableRepositoryModel) Get() *RepositoryModel {
	return v.value
}

func (v *NullableRepositoryModel) Set(val *RepositoryModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryModel(val *RepositoryModel) *NullableRepositoryModel {
	return &NullableRepositoryModel{value: val, isSet: true}
}

func (v NullableRepositoryModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


